{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap f5387bb0620c4ac0d0ab","webpack:///./src/services/Connection.js","webpack:///./src/services/User.js","webpack:///./src/services/Job.js","webpack:///./src/helpers/FilterBuilder.js","webpack:///./src/index.js","webpack:///./src/BasiqSession.js","webpack:///./src/helpers/API.js","webpack:///external \"request\"","webpack:///./src/errors/Error.js","webpack:///./src/services/TransactionList.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA,mC;;;;;;ACzLA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA,yBAAyB,OAAO;AAChC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;;AAEA,6B;;;;;;ACxPA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC3JA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+B;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT,KAAK;AACL;;AAEA,yB;;;;;;ACzFA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qB;;;;;;AC5DA,oC;;;;;;ACAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,uB;;;;;;ACxBA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;;AAEA,iC","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f5387bb0620c4ac0d0ab","const BasiqJob = require(\"./Job\");\n\nconst Connection = function (data, service) {\n    this.id = data.id ? data.id : null;\n    this.institution = data.institution ? data.institution : null;\n    this.accounts = data.accounts ? data.accounts : null;\n    this.status = data.status ? data.status : null;\n\n    const self = this;\n\n    /**\n     * @type ConnectionService\n     */\n    this.service = service;\n\n    this.update = function (password, securityCode) {\n        return self.service.update(self, password, securityCode);\n    };\n\n    this.refresh = function () {\n        return self.service.refresh(self);\n    };\n\n    this.delete = function () {\n        return self.service.delete(self);\n    };\n\n};\n\nconst ConnectionService = function (session, user) {\n    if (!session) {\n        throw new Error(\"No session provided\");\n    }\n\n    if (!user) {\n        throw new Error(\"User not initialized\");\n    }\n\n    const self = this;\n\n    self.data = {\n        job: null\n    };\n\n    this.new = function (institutionId, loginId, password, securityCode) {\n        if (!loginId) {\n            throw new Error(\"No user id provided: \" + JSON.stringify(arguments));\n        }\n        if (!password) {\n            throw new Error(\"No password provided: \" + JSON.stringify(arguments));\n        }\n        if (!institutionId) {\n            throw new Error(\"No institution id provided: \" + JSON.stringify(arguments));\n        }\n\n        loginId = loginId.trim();\n        password = password.trim();\n        securityCode = securityCode && securityCode.trim();\n\n        const payload = {\n            loginId: loginId,\n            password: password,\n            institution: {\n                id: institutionId\n            }\n        };\n\n        if (securityCode && securityCode.length > 0) {\n            payload[\"securityCode\"] = securityCode;\n        }\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.id + \"/connections\", \"POST\", payload);\n            }).then(function (body) {\n                if (!body.id) {\n                    rej(body);\n                }\n                res((new BasiqJob(session, self).for(body)));\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.get = function (id) {\n        if (!id) {\n            throw new Error(\"No connection id provided: \" + JSON.stringify(arguments));\n        }\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.id + \"/connections/\" + id, \"GET\");\n            }).then(function (body) {\n                if (!body.id) {\n                    rej(body);\n                }\n\n                res(new Connection(body, self));\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n\n    this.update = function (connection, password) {\n        if (!password) {\n            throw new Error(\"No password provided for connection update\");\n        }\n\n        if (!connection.institution.id) {\n            throw new Error(\"No institution id set for connection\");\n        }\n\n        const payload = {\n            password: password,\n            institution: {\n                id: self.data.institution.id\n            }\n        };\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.id + \"/connections/\" + self.data.id, \"POST\", payload);\n            }).then(function (body) {\n                if (!body.id) {\n                    rej(body);\n                }\n\n                res((new BasiqJob(session, self).for(body)));\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.delete = function (connection) {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.id + \"/connections/\" + connection.id, \"DELETE\");\n            }).then(function () {\n                res(true);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.refresh = function (connection) {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.id + \"/connections/\" + connection.id + \"/refresh\", \"POST\");\n            }).then(function (body) {\n                if (!body.id) {\n                    rej(body);\n                }\n\n                res((new BasiqJob(session, self).get(body.id)));\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.for = function (id, institutionId) {\n        if (!id) {\n            throw new Error(\"No connection id provided\");\n        }\n\n        const data = {id: id};\n\n        if (institutionId) {\n            data.institution = {\n                id: institutionId\n            };\n        }\n\n        return new Connection(data, self);\n    };\n\n\n    return this;\n};\n\nmodule.exports = ConnectionService;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/services/Connection.js\n// module id = 0\n// module chunks = 0","const BasiqConnection = require(\"./Connection\"),\n    TransactionList = require(\"./TransactionList\"),\n    FilterBuilder = require(\"../helpers/FilterBuilder\");\n\nconst User = function (data, service) {\n    this.id = data.id ? data.id : null;\n    this.email = data.email ? data.email : null;\n    this.mobile = data.mobile ? data.mobile : null;\n\n    /**\n     * @type UserService\n     */\n    this.service = service;\n\n    const self = this;\n\n    this.createConnection = function (institutionId, loginId, password, securityCode) {\n        return self.service.createConnection(self, institutionId, loginId, password, securityCode);\n    };\n\n    this.update = function (data) {\n        return self.service.update(self, data);\n    };\n\n    this.delete = function () {\n        return self.service.delete(self);\n    };\n\n    this.refreshAllConnections = function () {\n        return self.service.refreshAllConnections(self);\n    };\n\n    this.listAllConnections = function (filter) {\n        return self.service.getAllConnections(self, filter);\n    };\n\n    this.getAccount = function (accountId) {\n        return self.service.getAccount(self, accountId);\n    };\n\n    this.getAccounts = function (filter) {\n        return self.service.getAccounts(self, filter);\n    };\n\n    this.getTransaction = function (transactionId) {\n        return self.service.getTransaction(self, transactionId);\n    };\n\n    this.getTransactions = function (filter) {\n        return self.service.getTransactions(self, filter);\n    };\n\n};\n\nconst UserService = function (session) {\n    if (!session) {\n        throw new Error(\"No session provided\");\n    }\n\n    const self = this;\n\n    this.new = function (data) {\n        return new Promise(function (res, rej) {\n            if (!data || (!data.email && !data.mobile)) {\n                rej(new Error(\"No email or phone number provided for user\"));\n            }\n\n            return session.getToken().then(function () {\n                return session.API.send(\"users\", \"POST\", data);\n            }).then(function (body) {\n                res(new User(body, self));\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.get = function (id) {\n        return new Promise(function (res, rej) {\n            if (!id) {\n                rej(new Error(\"No id provided for user\"));\n            }\n\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + id, \"GET\");\n            }).then(function (body) {\n                res(new User(body, self));\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.for = function (id) {\n        if (!id) {\n            throw new Error(\"No id provided for user\");\n        }\n\n        return new User({id: id}, self);\n    };\n\n    this.update = function (user, data) {\n        return new Promise(function (res, rej) {\n            if (!user.id) {\n                rej(new Error(\"User has not been initialized\"));\n            }\n\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.id, \"POST\", data);\n            }).then(function (body) {\n                if (!body.id) {\n                    rej(body);\n                }\n                res(new User(body, self));\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.delete = function (user) {\n        return new Promise(function (res, rej) {\n            if (!user.id) {\n                rej(new Error(\"User has not been initialized\"));\n            }\n\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.id, \"DELETE\");\n            }).then(function () {\n                res(true);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.createConnection = function (user, institutionId, loginId, password, securityCode) {\n        return new BasiqConnection(session, user).new(institutionId, loginId, password, securityCode);\n    };\n\n    this.getAllConnections = function (user, filter) {\n        return new Promise(function (res, rej) {\n            let url = \"users/\" + user.id + \"/connections\";\n            if (filter) {\n                if (!(filter instanceof FilterBuilder)) {\n                    rej(new Error(\"Filter argument must be an instance of FilterBuilder\"));\n                }\n\n                url = url + \"?\" + filter.getFilter();\n            }\n\n            return session.getToken().then(function () {\n                return session.API.send(url, \"GET\");\n            }).then(function (body) {\n                res(body);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.refreshAllConnections = function (user) {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.id + \"/connections/refresh\", \"POST\");\n            }).then(function (body) {\n                if (!body.data) {\n                    rej(\"Invalid API response: \" + JSON.stringify(body));\n                }\n\n                res(body.data);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.getAccounts = function (user, filter) {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                let url = \"users/\" + user.id + \"/accounts\";\n\n                if (filter) {\n                    if (!(filter instanceof FilterBuilder)) {\n                        rej(new Error(\"Filter argument must be an instance of FilterBuilder\"));\n                    }\n\n                    url = url + \"?\" + filter.getFilter();\n                }\n\n                session.API.send(url , \"GET\").then(function (body) {\n                    res(body);\n                }).catch(function (err) {\n                    rej(err);\n                });\n            });\n        });\n    };\n\n    this.getAccount = function (user, accountId) {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.id + \"/accounts/\" + accountId , \"GET\");\n            }).then(function (body) {\n                res(body);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.getTransactions = function (user, filter) {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                let url = \"users/\" + user.id + \"/transactions\";\n\n                if (filter) {\n                    if (!(filter instanceof FilterBuilder)) {\n                        rej(new Error(\"Filter argument must be an instance of FilterBuilder\"));\n                    }\n\n                    url = url + \"?\" + filter.getFilter();\n                }\n\n                session.API.send(url , \"GET\").then(function (body) {\n                    res(new TransactionList(body, session));\n                }).catch(function (err) {\n                    rej(err);\n                });\n            });\n        });\n    };\n\n    this.getTransaction = function (user, transactionId) {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.id + \"/transactions/\" + transactionId , \"GET\");\n            }).then(function (body) {\n                res(body);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    return self;\n};\n\nmodule.exports = UserService;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/services/User.js\n// module id = 1\n// module chunks = 0","const BasiqConnection = require(\"./Connection\");\n\nconst Job = function (data, service) {\n    this.id = data.id ? data.id : null;\n    this.created = data.created ? data.created : null;\n    this.updated = data.updated ? data.updated : null;\n    this.steps = data.steps ? data.steps : null;\n    this.links = data.links ? data.links : null;\n\n    const self = this;\n\n    /**\n     * @type JobService\n     */\n    this.service = service;\n\n    this.getConnectionId = function () {\n        if (!self.links || !self.links.source) {\n            return \"\";\n        }\n\n        return self.links.source.substr(self.links.source.lastIndexOf(\"/\") + 1);\n    };\n\n    this.refresh = function () {\n        return this.service.get(self.id);\n    };\n\n    this.getCurrentStep = function () {\n        let currentStep = {\n            title: \"uninitialized\"\n        };\n\n        for (let step in self.steps) {\n            if (!self.steps.hasOwnProperty(step)) {\n                continue;\n            }\n\n            if (self.steps[step].status === \"success\") {\n                currentStep = self.steps[step];\n            }\n        }\n\n        return currentStep;\n    };\n\n    this.waitForCredentials = function (interval, timeout) {\n        return this.service.waitForCredentials(self, interval, timeout);\n    };\n\n    this.getConnection = function () {\n        return this.service.getConnection(self);\n    };\n\n    this.canFetchTransactions = function () {\n        return self.service.canFetchTransactions(self);\n    };\n\n    this.canFetchAccounts = function () {\n        return self.service.canFetchAccounts(self);\n    };\n\n};\n\nconst JobService = function (session, connectionService) {\n    const self = this;\n\n    this.connectionService = connectionService;\n\n    this.get = function (id) {\n        if (!id) {\n            throw new Error(\"No job id provided\");\n        }\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"jobs/\" + id, \"GET\");\n            }).then(function (body) {\n                res(new Job(body, self));\n            }).catch(function(err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.for = function (data) {\n        if (!data.id) {\n            throw new Error(\"No job id provided\");\n        }\n\n        return new Job(data, self);\n    };\n\n    this.getConnection = async function (job) {\n        let connectionId;\n\n        if (job.getConnectionId() === \"\") {\n            const newJob = await self.get(job.id);\n\n            connectionId = newJob.getConnectionId();\n        } else {\n            connectionId = job.getConnectionId();\n        }\n\n        return connectionService.get(connectionId);\n    };\n\n    this.waitForCredentials = function (job, interval, timeout) {\n        const start = Date.now();\n\n        return new Promise(async function (res, rej) {\n            const check = async function (i) {\n                if (Date.now() - start > timeout * 1000) {\n                    return rej({\n                        timeout: true,\n                        message: \"The operation has timed out\"\n                    });\n                }\n\n                job = await job.refresh();\n\n                const credentialsStep = job.steps && job.steps[0];\n\n                if (credentialsStep.status && credentialsStep.status !== \"in-progress\" && credentialsStep.status !== \"pending\") {\n                    if (credentialsStep.status === \"success\" || credentialsStep.status === \"failed\") {\n                        return res(connectionService.get(job.getConnectionId()));\n                    }\n\n                    return res(null);\n                }\n\n                setTimeout(check.bind(null, ++i), interval);\n            };\n\n            setTimeout(check.bind(null, 0), 0);\n        });\n    };\n\n    this.canFetchTransactions = async function (job) {\n        if (!job.steps) {\n            job = await job.refresh();\n        }\n\n        return job.getCurrentStep().title === \"retrieve-accounts\" || job.getCurrentStep().title === \"retrieve-transactions\";\n    };\n\n    this.canFetchAccounts = async function (job) {\n        if (!job.steps) {\n            job = await job.refresh();\n        }\n\n        return job.getCurrentStep().title === \"retrieve-accounts\" && job.getCurrentStep().status === \"success\";\n    };\n};\n\nmodule.exports = JobService;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/services/Job.js\n// module id = 2\n// module chunks = 0","function FilterBuilder(filters) {\n    if (!this) {\n        return new FilterBuilder(filters);\n    }\n\n    this.filters = filters ? filters : [];\n\n    const self = this;\n\n    this.eq = function (field, value) {\n        self.filters.push(field + \".eq('\"+value+\"')\");\n        return self;\n    };\n\n    this.gt = function (field, value) {\n        self.filters.push(field + \".gt('\"+value+\"')\");\n        return self;\n    };\n\n    this.gteq = function (field, value) {\n        self.filters.push(field + \".gteq('\"+value+\"')\");\n        return self;\n    };\n\n    this.lt = function (field, value) {\n        self.filters.push(field + \".lt('\"+value+\"')\");\n        return self;\n    };\n\n    this.lteq = function (field, value) {\n        self.filters.push(field + \".lteq('\"+value+\"')\");\n        return self;\n    };\n\n    this.bt = function (field, valueOne, valueTwo) {\n        self.filters.push(field + \".bt('\"+valueOne+\"','\"+valueTwo+\"')\");\n        return self;\n    };\n\n    this.toString = function () {\n        return self.filters.join(\",\");\n    };\n\n    this.getFilter = function () {\n        return \"filter=\" + self.filters.join(\",\");\n    };\n\n    this.setFilter = function (filters) {\n        self.filters = filters;\n        return self;\n    };\n\n    return this;\n}\n\nmodule.exports = FilterBuilder;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/helpers/FilterBuilder.js\n// module id = 3\n// module chunks = 0","module.exports = {\n    Session: require(\"./BasiqSession\"),\n    User: require(\"./services/User\"),\n    Connection: require(\"./services/Connection\"),\n    Job: require(\"./services/Job\"),\n    FilterBuilder: require(\"./helpers/FilterBuilder\")\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 4\n// module chunks = 0","const API = require(\"./helpers/API\"),\n    BasiqUser = require(\"./services/User\");\n\nconst Session = function (apiKey, apiVersion) {\n    if (!this) {\n        return new Session(apiKey, apiVersion);\n    }\n\n    apiVersion = apiVersion || \"1.0\";\n\n    let token = null;\n\n    const self = this;\n\n    this.sessionTimestamp = null;\n\n    this.API = (new API(\"https://au-api.basiq.io\")).setHeader(\"Authorization\", \"Basic \" + apiKey).setHeader(\"basiq-version\", apiVersion);\n\n    this.expired = function () {\n        return Date.now() - self.sessionTimestamp > 1000 * 60 * 60;\n    };\n\n    this.getToken = function () {\n        if (!self.expired()) {\n            return new Promise(function (res) {\n                res(true);\n            });\n        }\n\n        return new Promise(function (res, rej) {\n            return self.API.setHeader(\"Authorization\", \"Basic \" + apiKey).send(\"oauth2/token\", \"POST\", {\n                \"grant_type\": \"client_credentials\"\n            }).then(function (body) {\n                self.sessionTimestamp = Date.now();\n                token = body.access_token;\n                self.API.setHeader(\"Authorization\", \"Bearer \" + body.access_token);\n\n                res(true);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.createUser = function (data) {\n        return new BasiqUser(self).new(data);\n    };\n\n    this.getUser = function (id) {\n        return new BasiqUser(self).get(id);\n    };\n\n    this.forUser = function (id) {\n        return new BasiqUser(self).for(id);\n    };\n\n    this.getInstitutions = function () {\n        return new Promise(function (res, rej) {\n            return self.getToken().then(function () {\n                return self.API.send(\"institutions\" , \"GET\");\n            }).then(function (body) {\n                res(body);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.getInstitution = function (institutionId) {\n        return new Promise(function (res, rej) {\n            return self.getToken().then(function () {\n                return self.API.send(\"institutions/\" + institutionId , \"GET\");\n            }).then(function (body) {\n                res(body);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    return new Promise(function (res, rej) {\n        self.getToken().then(function () {\n            res(self);\n        }).catch(function (err) {\n            rej(err);\n        });\n    });\n};\n\nmodule.exports = Session;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/BasiqSession.js\n// module id = 5\n// module chunks = 0","const request = require(\"request\"),\n    Error = require(\"../errors/Error\");\n\n//require(\"request\").debug = true;\n\nconst API = function(host) {\n    this.options = {\n        host: host,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n    };\n\n    return this;\n};\n\nAPI.prototype.setHeader = function (header, value) {\n    this.options.headers[header] = value;\n\n    return this;\n};\n\nAPI.prototype.send = function (path, method, data) {\n    const options = {};\n    options.uri = this.options.host + \"/\" + path;\n    options.method = method.toUpperCase();\n    options.headers = cloneObject(this.options.headers);\n\n    if (data) {\n        options.body = JSON.stringify(data);\n        options.headers[\"Content-Length\"] = options.body.length;\n    }\n\n    return new Promise(function (res, rej) {\n        request(options, function (error, response, body) {\n            if (error || response.statusCode > 299) {\n                if (error) {\n                    return rej(error);\n                } else {\n                    return rej(new Error(body, response.statusCode));\n                }\n            }\n            try {\n                res(JSON.parse(body));\n            } catch (err) {\n                res(null);\n            }\n        });\n    });\n};\n\nfunction cloneObject(obj) {\n    if (null === obj || \"object\" !== typeof obj) return obj;\n    const copy = obj.constructor();\n    for (let attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n    }\n    return copy;\n}\n\nmodule.exports = API;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/helpers/API.js\n// module id = 6\n// module chunks = 0","module.exports = require(\"request\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"request\"\n// module id = 7\n// module chunks = 0","function Error(body, statusCode) {\n    if (this === undefined) {\n        return new Error(body, statusCode);\n    }\n\n    if (typeof body === \"object\") {\n        return body;\n    }\n\n    let data;\n\n    try {\n        data = JSON.parse(body);\n    } catch (e) {\n        return e;\n    }\n\n    this.statusCode = statusCode;\n    this.response = data;\n    this.message = data.data.reduce(function (acc, curr) {\n        return acc += curr.detail + \" \";\n    }, \"\").trim();\n}\n\nmodule.exports = Error;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/errors/Error.js\n// module id = 8\n// module chunks = 0","const TransactionList = function(data, session) {\n\n    this.data = data.data;\n    this.links = data.links;\n    this.session = session;\n\n    const self = this;\n\n    this.next = function() {\n        if (!self.links || !self.links[\"next\"]) {\n            return false;\n        }\n\n        const next = self.links[\"next\"].substr(self.links[\"next\"].indexOf(\".io/\") + 4);\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(next , \"GET\");\n            }).then(function (body) {\n                if (body.data && body.data.length === 0) {\n                    return res(false);\n                }\n\n                self.data = body.data;\n                self.links = body.links;\n\n                res(true);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    return this;\n};\n\nmodule.exports = TransactionList;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/services/TransactionList.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}